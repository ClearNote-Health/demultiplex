nextflow_pipeline {

    name "Test Workflow main.nf"
    script "main.nf"
    tag "bcl2fastq_pe"
    tag "pipeline"

    test("Bcl2Fastq_pe") {

        when {
            params {
                input         = 'https://raw.githubusercontent.com/nf-core/test-datasets/demultiplex/samplesheet/1.3.0/pe_samplesheet.csv'
                demultiplexer = 'bcl2fastq'
                skip_tools    = "checkqc"
                outdir        = "$outputDir"
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(UTILS.removeNextflowVersion("$outputDir")).match("software_versions") },
                { assert workflow.trace.succeeded().size() == 6 },
                { assert snapshot(
                        path("$outputDir/multiqc/multiqc_data/bcl2fastq_lane_counts.txt"),
                        path("$outputDir/multiqc/multiqc_data/fastp_filtered_reads_plot.txt"),
                        path("$outputDir/multiqc/multiqc_data/bcl2fastq_sample_counts.txt")

                    ).match("multiqc") },
                { assert snapshot(
                        path("$outputDir/PE_Sample.lane1_no_adapters.csv"),
                        path("$outputDir/PE_Sample/L001/Sample1_S1_L001_1.fastp.fastq.gz"),
                        path("$outputDir/PE_Sample/L001/Sample1_S1_L001_2.fastp.fastq.gz"),
                        path("$outputDir/PE_Sample/L001/Sample1_S1_L001_R1_001.fastq.gz"),
                        path("$outputDir/PE_Sample/L001/Sample1_S1_L001_R2_001.fastq.gz"),
                        path("$outputDir/PE_Sample/L001/Sample1_S1_L001_1.fastp.fastq.gz_summary.txt"),
                        path("$outputDir/PE_Sample/L001/Sample1_S1_L001_2.fastp.fastq.gz_summary.txt"),
                        path("$outputDir/PE_Sample/L001/Reports/").list(),
                        path("$outputDir/PE_Sample/L001/Stats/").list()
                    ).match("bcl2fastq_pe") }
            )
        }

    }

}
